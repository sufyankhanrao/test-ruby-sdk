# json_value_tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class JsonValControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.json_val
    @response_catcher = @controller.http_call_back
  end

  # Send Value in Model
  def test_send_value_in_model
    # Parameters for the API call
    body = ValueContainer.from_hash(APIHelper.json_deserialize(
      '{"name":"a name","id":"definition-123","valueMap":{"key1":"some string"'\
      ',"key2":true,"key3":123},"valueArray":["some string",true,123],"value":'\
      '"some string value in model"}', false))

    # Perform the API call through the SDK function
    result = @controller.send_valuein_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Value as Body
  def test_send_value_as_body
    # Parameters for the API call
    body = JSON.parse(
      'false'
    )

    # Perform the API call through the SDK function
    result = @controller.send_valueas_body(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Value as Form
  def test_send_value_as_form
    # Parameters for the API call
    options = {}
    options['content_type'] = 'application/x-www-form-urlencoded'
    options['id'] = 54
    options['model'] = JSON.parse(
      'true'
    )
    options['model_array'] = APIHelper.json_deserialize(
      '[true,"some string",123]', false)
    options['model_map'] = JSON.parse(
      '{"key1":true,"key2":"some string","key3":123}'
    )

    # Perform the API call through the SDK function
    result = @controller.send_valueas_form(options)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Value as Query
  def test_send_value_as_query
    # Parameters for the API call
    options = {}
    options['id'] = 54
    options['model'] = JSON.parse(
      'true'
    )
    options['model_array'] = APIHelper.json_deserialize(
      '[true,"some string",123]', false)
    options['model_map'] = JSON.parse(
      '{"key1":true,"key2":"some string","key3":123}'
    )

    # Perform the API call through the SDK function
    result = @controller.send_valueas_query(options)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Value
  def test_get_value

    # Perform the API call through the SDK function
    result = @controller.get_value()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal('978', @response_catcher.response.raw_body)
  end

  # Get Value Array
  def test_get_value_array

    # Perform the API call through the SDK function
    result = @controller.get_value_array()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    assert_equal('[978,"some string",false]', @response_catcher.response.raw_body)
  end

  # Get Value Map
  def test_get_value_map

    # Perform the API call through the SDK function
    result = @controller.get_value_map()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"key1":978,"key2":"some string","key3":false}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Value in Model
  def test_get_value_in_model

    # Perform the API call through the SDK function
    result = @controller.get_valuein_model()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"name":"a name","id":"definition-123","valueMap":{"key1":"some string"'\
      ',"key2":true,"key3":123},"valueArray":["some string",true,123],"value":'\
      '"some string value in model"}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

end