# json_value_tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

require_relative 'controller_test_base'

class JsonObjControllerTests < ControllerTestBase
  # Called only once for the class before any test has executed
  def setup
    setup_class
    @controller = @client.json_obj
    @response_catcher = @controller.http_call_back
  end

  # Send Schema in Model
  def test_send_schema_in_model
    # Parameters for the API call
    body = SchemaContainer.from_hash(APIHelper.json_deserialize(
      '{"name":"a name","id":"definition-123","schemaMap":{"key1":{"$id":"http'\
      's://example.com/person.schema.json","$schema":"https://json-schema.org/'\
      'draft/2020-12/schema","title":"Person","type":"object","properties":{"f'\
      'irstName":{"type":"string","description":"The person\'s first name."},"'\
      'lastName":{"type":"string","description":"The person\'s last name.","te'\
      'st":null},"age":{"type":"integer","description":"Age in years","minimum'\
      '":0}}},"key2":{"$id":"https://example.com/person.schema.json","$schema"'\
      ':"https://json-schema.org/draft/2020-12/schema","title":"Person","type"'\
      ':"object","properties":{"firstName":{"type":"string","description":"The'\
      ' person\'s first name."},"lastName":{"type":"string","description":"The'\
      ' person\'s last name.","test":null},"age":{"type":"integer","descriptio'\
      'n":"Age in years","minimum":0}}}},"schemaArray":[{"$id":"https://exampl'\
      'e.com/person.schema.json","$schema":"https://json-schema.org/draft/2020'\
      '-12/schema","title":"Person","type":"object","properties":{"firstName":'\
      '{"type":"string","description":"The person\'s first name."},"lastName":'\
      '{"type":"string","description":"The person\'s last name.","test":null},'\
      '"age":{"type":"integer","description":"Age in years","minimum":0}}},{"$'\
      'id":"https://example.com/person.schema.json","$schema":"https://json-sc'\
      'hema.org/draft/2020-12/schema","title":"Person","type":"object","proper'\
      'ties":{"firstName":{"type":"string","description":"The person\'s first '\
      'name."},"lastName":{"type":"string","description":"The person\'s last n'\
      'ame.","test":null},"age":{"type":"integer","description":"Age in years"'\
      ',"minimum":0}}}],"schema":{"$id":"https://example.com/person.schema.jso'\
      'n","$schema":"https://json-schema.org/draft/2020-12/schema","title":"Pe'\
      'rson","type":"object","properties":{"firstName":{"type":"string","descr'\
      'iption":"The person\'s first name."},"lastName":{"type":"string","descr'\
      'iption":"The person\'s last name.","test":null},"age":{"type":"integer"'\
      ',"description":"Age in years","minimum":0}}}}', false))

    # Perform the API call through the SDK function
    result = @controller.send_schemain_model(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Schema as Body
  def test_send_schema_as_body
    # Parameters for the API call
    body = {"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}}

    # Perform the API call through the SDK function
    result = @controller.send_schemaas_body(body)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true,"message":"OK","nullableNumberMap":{"luckydraw1":null,"l'\
      'uckydraw2":88.1,"luckydraw3":89.1,"luckydraw4":null,"luckydraw5":91.1},'\
      '"nullableNumberArray":[null,88.1,89.1,null,91.1]}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Schema as Form
  def test_send_schema_as_form
    # Parameters for the API call
    options = {}
    options['content_type'] = 'application/x-www-form-urlencoded'
    options['id'] = 54
    options['model'] = {"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}}
    options['model_array'] = APIHelper.json_deserialize(
      '[{"$id":"https://example.com/person.schema.json","$schema":"https://jso'\
      'n-schema.org/draft/2020-12/schema","title":"Person","type":"object","pr'\
      'operties":{"firstName":{"type":"string","description":"The person\'s fi'\
      'rst name."},"lastName":{"type":"string","description":"The person\'s la'\
      'st name.","test":null},"age":{"type":"integer","description":"Age in ye'\
      'ars","minimum":0}}},{"$id":"https://example.com/person.schema.json","$s'\
      'chema":"https://json-schema.org/draft/2020-12/schema","title":"Person",'\
      '"type":"object","properties":{"firstName":{"type":"string","description'\
      '":"The person\'s first name."},"lastName":{"type":"string","description'\
      '":"The person\'s last name.","test":null},"age":{"type":"integer","desc'\
      'ription":"Age in years","minimum":0}}}]', false)
    options['model_map'] = {"key1"=>{"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}},"key2"=>{"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}}}

    # Perform the API call through the SDK function
    result = @controller.send_schemaas_form(options)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Send Schema as Query
  def test_send_schema_as_query
    # Parameters for the API call
    options = {}
    options['id'] = 54
    options['model'] = {"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}}
    options['model_array'] = APIHelper.json_deserialize(
      '[{"$id":"https://example.com/person.schema.json","$schema":"https://jso'\
      'n-schema.org/draft/2020-12/schema","title":"Person","type":"object","pr'\
      'operties":{"firstName":{"type":"string","description":"The person\'s fi'\
      'rst name."},"lastName":{"type":"string","description":"The person\'s la'\
      'st name.","test":null},"age":{"type":"integer","description":"Age in ye'\
      'ars","minimum":0}}},{"$id":"https://example.com/person.schema.json","$s'\
      'chema":"https://json-schema.org/draft/2020-12/schema","title":"Person",'\
      '"type":"object","properties":{"firstName":{"type":"string","description'\
      '":"The person\'s first name."},"lastName":{"type":"string","description'\
      '":"The person\'s last name.","test":null},"age":{"type":"integer","desc'\
      'ription":"Age in years","minimum":0}}}]', false)
    options['model_map'] = {"key1"=>{"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}},"key2"=>{"$id"=>"https://example.com/person.schema.json","$schema"=>"https://json-schema.org/draft/2020-12/schema","title"=>"Person","type"=>"object","properties"=>{"firstName"=>{"type"=>"string","description"=>"The person's first name."},"lastName"=>{"type"=>"string","description"=>"The person's last name.","test"=>nil},"age"=>{"type"=>"integer","description"=>"Age in years","minimum"=>0}}}}

    # Perform the API call through the SDK function
    result = @controller.send_schemaas_query(options)

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"passed":true}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Schema
  def test_get_schema

    # Perform the API call through the SDK function
    result = @controller.get_schema()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"$id":"https://example.com/person.schema.json","$schema":"https://json'\
      '-schema.org/draft/2020-12/schema","title":"Person","type":"object","pro'\
      'perties":{"firstName":{"type":"string","description":"The person\'s fir'\
      'st name."},"lastName":{"type":"string","description":"The person\'s las'\
      't name.","test":null},"age":{"type":"integer","description":"Age in yea'\
      'rs","minimum":0}}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Schema Array
  def test_get_schema_array

    # Perform the API call through the SDK function
    result = @controller.get_schema_array()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '[{"$id":"https://example.com/person.schema.json","$schema":"https://jso'\
      'n-schema.org/draft/2020-12/schema","title":"Person","type":"object","pr'\
      'operties":{"firstName":{"type":"string","description":"The person\'s fi'\
      'rst name."},"lastName":{"type":"string","description":"The person\'s la'\
      'st name.","test":null},"age":{"type":"integer","description":"Age in ye'\
      'ars","minimum":0}}},{"$id":"https://example.com/person.schema.json","$s'\
      'chema":"https://json-schema.org/draft/2020-12/schema","title":"Person",'\
      '"type":"object","properties":{"firstName":{"type":"string","description'\
      '":"The person\'s first name."},"lastName":{"type":"string","description'\
      '":"The person\'s last name.","test":null},"age":{"type":"integer","desc'\
      'ription":"Age in years","minimum":0}}}]'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Schema Map
  def test_get_schema_map

    # Perform the API call through the SDK function
    result = @controller.get_schema_map()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"key1":{"$id":"https://example.com/person.schema.json","$schema":"http'\
      's://json-schema.org/draft/2020-12/schema","title":"Person","type":"obje'\
      'ct","properties":{"firstName":{"type":"string","description":"The perso'\
      'n\'s first name."},"lastName":{"type":"string","description":"The perso'\
      'n\'s last name.","test":null},"age":{"type":"integer","description":"Ag'\
      'e in years","minimum":0}}},"key2":{"$id":"https://example.com/person.sc'\
      'hema.json","$schema":"https://json-schema.org/draft/2020-12/schema","ti'\
      'tle":"Person","type":"object","properties":{"firstName":{"type":"string'\
      '","description":"The person\'s first name."},"lastName":{"type":"string'\
      '","description":"The person\'s last name.","test":null},"age":{"type":"'\
      'integer","description":"Age in years","minimum":0}}}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

  # Get Schema in Model
  def test_get_schema_in_model

    # Perform the API call through the SDK function
    result = @controller.get_schemain_model()

    # Test response code
    assert_equal(200, @response_catcher.response.status_code)

    # Test whether the captured response is as we expected
    refute_nil(result)
    expected_body = JSON.parse(
      '{"name":"a name","id":"definition-123","schemaMap":{"key1":{"$id":"http'\
      's://example.com/person.schema.json","$schema":"https://json-schema.org/'\
      'draft/2020-12/schema","title":"Person","type":"object","properties":{"f'\
      'irstName":{"type":"string","description":"The person\'s first name."},"'\
      'lastName":{"type":"string","description":"The person\'s last name.","te'\
      'st":null},"age":{"type":"integer","description":"Age in years","minimum'\
      '":0}}},"key2":{"$id":"https://example.com/person.schema.json","$schema"'\
      ':"https://json-schema.org/draft/2020-12/schema","title":"Person","type"'\
      ':"object","properties":{"firstName":{"type":"string","description":"The'\
      ' person\'s first name."},"lastName":{"type":"string","description":"The'\
      ' person\'s last name.","test":null},"age":{"type":"integer","descriptio'\
      'n":"Age in years","minimum":0}}}},"schemaArray":[{"$id":"https://exampl'\
      'e.com/person.schema.json","$schema":"https://json-schema.org/draft/2020'\
      '-12/schema","title":"Person","type":"object","properties":{"firstName":'\
      '{"type":"string","description":"The person\'s first name."},"lastName":'\
      '{"type":"string","description":"The person\'s last name.","test":null},'\
      '"age":{"type":"integer","description":"Age in years","minimum":0}}},{"$'\
      'id":"https://example.com/person.schema.json","$schema":"https://json-sc'\
      'hema.org/draft/2020-12/schema","title":"Person","type":"object","proper'\
      'ties":{"firstName":{"type":"string","description":"The person\'s first '\
      'name."},"lastName":{"type":"string","description":"The person\'s last n'\
      'ame.","test":null},"age":{"type":"integer","description":"Age in years"'\
      ',"minimum":0}}}],"schema":{"$id":"https://example.com/person.schema.jso'\
      'n","$schema":"https://json-schema.org/draft/2020-12/schema","title":"Pe'\
      'rson","type":"object","properties":{"firstName":{"type":"string","descr'\
      'iption":"The person\'s first name."},"lastName":{"type":"string","descr'\
      'iption":"The person\'s last name.","test":null},"age":{"type":"integer"'\
      ',"description":"Age in years","minimum":0}}}}'
    )
    received_body = JSON.parse(@response_catcher.response.raw_body)
    assert(ComparisonHelper.match_body(expected_body, received_body, check_values: true))
  end

end