# json_value_tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module JsonValueTester
  # SchemaContainer Model.
  class SchemaContainer < BaseModel
    SKIP = Object.new
    private_constant :SKIP

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :name

    # TODO: Write general description for this method
    # @return [String]
    attr_accessor :id

    # TODO: Write general description for this method
    # @return [Hash]
    attr_accessor :schema

    # TODO: Write general description for this method
    # @return [Array[Hash]]
    attr_accessor :schema_array

    # TODO: Write general description for this method
    # @return [Hash[String, Hash]]
    attr_accessor :schema_map

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['name'] = 'name'
      @_hash['id'] = 'id'
      @_hash['schema'] = 'schema'
      @_hash['schema_array'] = 'schemaArray'
      @_hash['schema_map'] = 'schemaMap'
      @_hash
    end

    # An array for optional fields
    def self.optionals
      %w[
        schema_array
        schema_map
      ]
    end

    # An array for nullable fields
    def self.nullables
      []
    end

    def initialize(id = nil, name = nil, schema = nil, schema_array = SKIP,
                   schema_map = SKIP, additional_properties = {})
      @name = name
      @id = id
      @schema = schema
      @schema_array = schema_array unless schema_array == SKIP
      @schema_map = schema_map unless schema_map == SKIP

      # Add additional model properties to the instance.
      additional_properties.each do |_name, _value|
        instance_variable_set("@#{_name}", _value)
      end
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      id = hash.key?('id') ? hash['id'] : nil
      name = hash.key?('name') ? hash['name'] : nil
      schema = hash.key?('schema') ? hash['schema'] : nil
      schema_array = hash.key?('schemaArray') ? hash['schemaArray'] : SKIP
      schema_map = hash.key?('schemaMap') ? hash['schemaMap'] : SKIP

      # Clean out expected properties from Hash.
      names.each_value { |k| hash.delete(k) }

      # Create object from extracted values.
      SchemaContainer.new(id,
                          name,
                          schema,
                          schema_array,
                          schema_map,
                          hash)
    end
  end
end
