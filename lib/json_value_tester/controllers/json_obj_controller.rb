# json_value_tester
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module JsonValueTester
  # JsonObjController
  class JsonObjController < BaseController
    # Send Schema in Model
    # @param [SchemaContainer] body Required parameter: Example:
    # @return [ServerResponse] response from the API call.
    def send_schemain_model(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/body/sendSchemaInModel',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(proc do |param| param.to_json unless param.nil? end))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ServerResponse.method(:from_hash)))
        .execute
    end

    # Send Schema as Body
    # @param [Hash] body Required parameter: Example:
    # @return [ServerResponse] response from the API call.
    def send_schemaas_body(body)
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/body/sendSchema',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'Content-Type'))
                   .body_param(new_parameter(body)
                                .is_required(true))
                   .header_param(new_parameter('application/json', key: 'accept'))
                   .body_serializer(APIHelper.method(:json_serialize)))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ServerResponse.method(:from_hash)))
        .execute
    end

    # Send Schema as Form
    # @param [ContentType] content_type Required parameter: Example:
    # @param [Integer] id Required parameter: Example:
    # @param [Hash] model Required parameter: Example:
    # @param [Array[Hash]] model_array Optional parameter: Example:
    # @param [Hash[String, Hash]] model_map Optional parameter: Example:
    # @return [ServerResponse] response from the API call.
    def send_schemaas_form(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/form/sendSchema',
                                     Server::DEFAULT)
                   .form_param(new_parameter(options['id'], key: 'id')
                                .is_required(true))
                   .form_param(new_parameter(options['model'], key: 'model')
                                .is_required(true))
                   .form_param(new_parameter(options['model_array'], key: 'modelArray'))
                   .form_param(new_parameter(options['model_map'], key: 'modelMap'))
                   .header_param(new_parameter('application/x-www-form-urlencoded', key: 'content-type'))
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ServerResponse.method(:from_hash)))
        .execute
    end

    # Send Schema as Query
    # @param [Integer] id Required parameter: Example:
    # @param [Hash] model Required parameter: Example:
    # @param [Array[Hash]] model_array Optional parameter: Example:
    # @param [Hash[String, Hash]] model_map Optional parameter: Example:
    # @return [ServerResponse] response from the API call.
    def send_schemaas_query(options = {})
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::POST,
                                     '/query/sendSchema',
                                     Server::DEFAULT)
                   .query_param(new_parameter(options['id'], key: 'id')
                                 .is_required(true))
                   .query_param(new_parameter(options['model'], key: 'model')
                                 .is_required(true))
                   .query_param(new_parameter(options['model_array'], key: 'modelArray'))
                   .query_param(new_parameter(options['model_map'], key: 'modelMap'))
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(ServerResponse.method(:from_hash)))
        .execute
    end

    # Get Schema
    # @return [Hash] response from the API call.
    def get_schema
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/response/getSchema',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end

    # Get Schema Array
    # @return [Array[Hash]] response from the API call.
    def get_schema_array
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/response/getSchemaArray',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:json_deserialize))
                    .is_response_array(true))
        .execute
    end

    # Get Schema Map
    # @return [Hash[String, Hash]] response from the API call.
    def get_schema_map
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/response/getSchemaMap',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:json_deserialize)))
        .execute
    end

    # Get Schema in Model
    # @return [SchemaContainer] response from the API call.
    def get_schemain_model
      new_api_call_builder
        .request(new_request_builder(HttpMethodEnum::GET,
                                     '/response/getSchemaInModel',
                                     Server::DEFAULT)
                   .header_param(new_parameter('application/json', key: 'accept')))
        .response(new_response_handler
                    .is_nullify404(true)
                    .deserializer(APIHelper.method(:custom_type_deserializer))
                    .deserialize_into(SchemaContainer.method(:from_hash)))
        .execute
    end
  end
end
